#http://www.codeskulptor.org/#user43_6dikfmqnvv_2.py

# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
playing = False

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# please do not redistribute without permission from Emiel at http://www.filmcomposer.nl
#soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, [self.image_center[0] + self.image_size[0], self.image_center[1]] , self.image_size,
                              self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size,
                              self.pos, self.image_size, self.angle)
    def get_pos(self):
        return self.pos
    def get_rad(self):
        return self.radius
    
    def update(self):
        #update angle
        self.angle += self.angle_vel
        
        #update position
        if self.thrust:
            acc_orient = angle_to_vector(self.angle)
            
            self.vel[0] += acc_orient[0]*.3
            self.vel[1] += acc_orient[1]*.3
        
        #friction
        self.vel[0] *= 0.99
        self.vel[1] *= 0.99
        
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
    
    def fire_missile(self):
        
        
        missile_angle = angle_to_vector(self.angle)
        missile_pos = [self.pos[0] + self.radius*missile_angle[0], self.pos[1] + self.radius*missile_angle[1]]
        missile_vel = [self.vel[0]+6*missile_angle[0], self.vel[1]+6*missile_angle[1]]
                      
        a_missile = Sprite(missile_pos, missile_vel, self.angle, 0, missile_image, missile_info, missile_sound) 
        
        missile_set.add(a_missile)
        

# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def get_pos(self):
        return self.pos
    
    def get_rad(self):
        return self.radius
    
    def draw(self, canvas):
        if self.animated:
            canvas.draw_image(self.image, [self.image_center[0] + self.age * self.image_size[0], 
                                           self.image_center[1]], self.image_size, self.pos, self.image_size)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, 
                              self.pos, self.image_size, self.angle)
        
    
    def update(self):
        self.angle += self.angle_vel
        
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % WIDTH
        
        #sprite lifespan check and age update
        if self.lifespan:
            if self.age > self.lifespan:
                return True
            else:
                self.age += 1
        return False
   
    #distrance check for collisions
    def collision(self, some_object):
        if dist(self.pos, some_object.get_pos()) < self.radius + some_object.get_rad():
            return True
        else:
            return False
        
def draw(canvas):
    global time, lives, score
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
   
    #SCORE AND LIVES
    canvas.draw_text("Score: " + str(score), [WIDTH-90, HEIGHT/20], 23, "White")
    canvas.draw_text("Lives: " + str(lives), [WIDTH/45, HEIGHT/20], 23, "White")
    
    # draw ship and sprites
    my_ship.draw(canvas)
    # update ship and sprites
    my_ship.update()
    
    #draw rocks in rock set
    for rock in rock_set: 
        rock.draw(canvas)
        rock.update()
    
    #draw missiles and remove if age>lifespan during update call
    for missile in missile_set:
        missile.draw(canvas)
        if missile.update():
            missile_set.remove(missile)
        
    for collision in explosion_set:
        collision.draw(canvas)
        if collision.update():
            explosion_set.remove(collision)
    
    if explosion(my_ship, rock_set) > 0:
        lives -= 1
        
    score += sprite_collision(missile_set, rock_set)
    
    if not playing:
        canvas.draw_image(splash_image, splash_info.get_center(), splash_info.get_size(), [WIDTH/2, HEIGHT/2],
                    splash_info.get_size())
                   
    

   

def key_down(key):
    
    if key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel += 0.2
    elif key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel -= 0.2
    elif key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = True 
        ship_thrust_sound.play()
    elif key == simplegui.KEY_MAP["space"]:
        my_ship.fire_missile()
        missile_sound.play()
        
        

def key_up(key):
    
    if key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0
    elif key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = 0 
    elif key == simplegui.KEY_MAP["up"]:
        my_ship.thrust = False
        ship_thrust_sound.pause()
        ship_thrust_sound.rewind()
    elif key == simplegui.KEY_MAP["space"]:
        
        missile_sound.rewind()
           
                                
# timer handler that spawns a rock    
def rock_spawner():
     
    global rock_set
    if len(rock_set) < 15: 
        pos = [random.random()*WIDTH, random.random()*HEIGHT]
        
        if dist(pos, my_ship.pos) < 70:
            pos = [random.random()*WIDTH, random.random()*HEIGHT]
            
        vel = angle_to_vector(random.random()*6)
        angle_vel = random.choice([-0.1, 0.1])
        a_rock = Sprite(pos, vel, 0, random.choice([-0.1, 0.1]), asteroid_image, asteroid_info)
        rock_set.add(a_rock)
        


def explosion(some_object, some_group):
    explosion_count = 0 
    
    for sprite in some_group:
        if sprite.collision(some_object):
            #add explosion case sprite  
            explosion_set.add(Sprite(sprite.get_pos(), (0,0), 0, 0, explosion_image, explosion_info, explosion_sound))
            some_group.remove(sprite)
            explosion_count += 1
    return explosion_count

def sprite_collision(group1, group2):
    total = 0
    
    for sprite in group1:
        hits = explosion(sprite, group2)
        if hits > 0:
            group1.remove(sprite)
        total += hits
    
    return total 
        
def mouse_handler(pos):
    global playing, lives, score, soundtrack
    
    center = [WIDTH/2, HEIGHT/2]
    splash = splash_info.get_size()
    
    in_splash_width = (center[0] - splash[0]/2) < pos[0] < (center[0] + splash[0]/2) 
    in_splash_height = (center[1] -splash[1]/2) < pos[1] < (center[1] + splash[1]/2)
    
    if not playing and in_splash_width and in_splash_height:
        playing = True
        lives = 3
        score = 0 
        soundtrack.rewind()
        soundtrack.play()
        

# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)

rock_set = set([])
missile_set = set([])
explosion_set = set([])





# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(key_down)
frame.set_keyup_handler(key_up)
timer = simplegui.create_timer(1000.0, rock_spawner)
frame.set_mouseclick_handler(mouse_handler)

# get things rolling
timer.start()
frame.start()
