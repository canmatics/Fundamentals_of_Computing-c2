#http://www.codeskulptor.org/#user43_1ywtBx5cuo_0.py

# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}
DRAW_GAP = 25

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.cards = [] 

    def __str__(self):
        result = ""
        for card in self.cards:
            result += self.suit + self.rank + " "
        
        return "Hand contains" + " " + result   

    def add_card(self, card):
        self.cards.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        has_A = False
        value = 0
        
        for count in range(0,len(self.cards)):
            value += VALUES[self.cards[count].rank]
            if self.cards[count].rank == 'A':
                has_A = True
        if has_A:
            return value + 10
        else:
            return value
    
    def busted(self):
        if self.get_value() > 21:
            return True
        else:
            return False
        
    def draw(self, canvas, pos):
        for count in range (1, len(self.cards)):
                           self.cards[count].draw(canvas,[pos[0] + count*(CARD_CENTER[0] + DRAW_GAP), pos[1] + CARD_CENTER[1]])
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = [Card(SUITS[i], RANKS[j]) for i in range (0, len(SUITS)) for j in range (0, len(RANKS))]

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)

    def deal_card(self):
        card_dealt = self.deck.pop()
        return card_dealt
    
    def __str__(self):
        result = ""
        for count in range (0, len(self.deck)):
            result += self.deck[count].suit + self.deck[count].rank + " "
        return "Deck contains" + " " + result 


#define event handlers for buttons
def deal():
    global outcome, in_play, score, player, dealer, d_new
    
    d_new = Deck()
    d_new.shuffle()
    outcome = "Let's GAMBLE!"
    
    player = Hand()
    player.add_card(d_new.deal_card()) 
    player.add_card(d_new.deal_card())
    
    dealer = Hand()
    dealer.add_card(d_new.deal_card())
    dealer.add_card(d_new.deal_card())
    
    if in_play:
        outcome = "You were in play! You lose!"
        score -= 1
            
    in_play = True

def hit():
    global player, outcome, d_new, score, in_play
 
    # if the hand is in play, hit the player
    if in_play:
        player.add_card(d_new.deal_card())
        
        # if busted, assign a message to outcome, update in_play and score
        if player.busted():
            outcome = "You busted!"
            score -= 1
            in_play = False
        

       
def stand():
    global in_play, dealer, d_new, player, score, outcome
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play:
        while dealer.get_value() < 17:
            dealer.add_card(d_new.deal_card())
    # assign a message to outcome, update in_play and score
        if player.busted():
            outcome = "You busted!"
            score -= 1
        else:
            if dealer.busted():
                outcome = "Dealer busted! You win!"
                score += 1
            elif player.get_value() == dealer.get_value():
                outcome = "Tie! You lose!"
                score -= 1
            elif player.get_value() > dealer.get_value():
                outcome = "You win!"
                score += 1
            elif player.get_value() < dealer.get_value():
                outcome = "You lose!"
                score -= 1
                
        #not in play while standing        
        in_play = False
        
# draw handler    
def draw(canvas):
    global player, dealer
    
    canvas.draw_text("BLACKJACK", [75,40], 30, "Black")
    canvas.draw_text("Score: " + str(score), [75,145], 35, "Black")
    canvas.draw_text(outcome, [405, 40], 35, "White")
    canvas.draw_text("Player's Hand", [405, 225], 25, "White")
    #if in play then only show one dealer card and one card back
    if in_play:
        #canvas.draw_image(image, center_source, width_height_source, center_dest, width_height_dest)
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [50+CARD_BACK_SIZE[0],200+CARD_BACK_SIZE[1]], CARD_SIZE)
    else:
        dealer.cards[0].draw(canvas, [90, 248])
    dealer.draw(canvas, [100, 200])
    
    
    if in_play:
        canvas.draw_text("Hit or stand?", [405, 145], 35, "Black")
    if not in_play:
        canvas.draw_text("Hit or stand?", [405, 145], 35, "Black")
    
    player.cards[0].draw(canvas, [405, 248])
    player.draw(canvas, [415,200])
    
    

   
    

# initialization frame
f = simplegui.create_frame("Blackjack", 800, 600)
f.set_canvas_background("Green")

#create buttons and canvas callback
f.add_button("Deal", deal, 170)
f.add_button("Hit",  hit, 170)
f.add_button("Stand", stand, 170)
f.set_draw_handler(draw)

# deal and get going
deal()

# get things rolling
f.start()
